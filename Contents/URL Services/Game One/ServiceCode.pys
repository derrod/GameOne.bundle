# Game One URL Service
# v0.1 by Rodney <https://github.com/derrod>

VIDEOAPIURL = "https://gameone.de/videos/%s.json"
AUDIOAPIURL = "https://gameone.de/audios/%s.json"
GALLERYAPIURL = "https://gameone.de/galleries/%s.json"

# Headers used by the official App.
HTTP.Headers['User-Agent'] = 'GameOne/323 CFNetwork/609 Darwin/13.0.0'
HTTP.Headers['X-G1APP-DEVICEINFO'] = 'iPhone3,1_6.0'
HTTP.Headers['X-G1APP-VERSION'] = '2.0.1(323)'
HTTP.Headers['X-G1APP-APPIDENTIFIER'] = 'de.gameone.iphone'
HTTP.Headers['X-G1APP-IDENTIFIER'] = '824BAB323627483698C844E2CC978D06'

def MetadataObjectForURL(url):
	id = url.split('/')[-1]
	#Determine whether the url is for audio, photo or video content, then handle it accordingly.
	if "gallery" in id:
		id = id.split(':')[-1]
		meta = JSON.ObjectFromURL(GALLERYAPIURL % id, cacheTime=3600.0, timeout = 120.0)['gallery']
		return PhotoAlbumObject(
			key = Callback(ViewMedia, id = id, fmt = 'image'),
			title = meta['title'],
			summary = 'Eine Gallerie',
			thumb = Resource.ContentsOfURLWithFallback(meta['images'][0]['image_url']),
			tagline = meta['title']
		)
	
	elif len(id) > 5:
		video_meta = JSON.ObjectFromURL(VIDEOAPIURL % id, cacheTime=3600.0, timeout = 20.0)['video_meta']
		duration = int(video_meta['duration']) * 1000
		return VideoClipObject(
			title = video_meta['title'],
			summary = video_meta['description'],
			thumb = Resource.ContentsOfURLWithFallback(video_meta['img_url']),
			duration = duration,
		)
	elif len(id) < 5:
		audio_meta = JSON.ObjectFromURL(AUDIOAPIURL % id, cacheTime=3600.0)['audio_meta']
		return TrackObject(
			title = audio_meta['title'],
			summary = audio_meta['description'],
		)


@deferred
def MediaObjectsForURL(url):
	ret = []
	id = url.split('/')[-1]
	if "gallery" in id:
		id = id.split(':')[-1]
		ret.append(MediaObject(
			parts = Callback(ViewMedia, id = id, fmt = 'image')
		))
	elif len(id) > 5:
		# This requests can take some time if made rapidly, on slower connections even more. The high timeout is mesaure to avoid errors.
		qualities = XML.ObjectFromURL('http://riptide.mtvnn.com/mediagen/' + id, cacheTime=3600.0, timeout = 240.0)
		for item in qualities.video.item.rendition[::-1]:
			height = int(item.attrib['height'])
			url = item.src.text
			ret.append(MediaObject(
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				video_resolution = height,
				audio_channels = 2,
				container = 'mp4',
				parts = [PartObject(key=Callback(ViewMedia, id = url, fmt = 'video'), streams = [AudioStreamObject(language_code = Locale.Language.German)])],
				optimized_for_streaming = 'true',
			))
	elif len(id) < 5:
		ret.append(MediaObject(
			audio_codec = AudioCodec.MP3,
			container = Container.MP3,
			audio_channels = 2,
			parts = [PartObject(key=Callback(ViewMedia, id = id, fmt='audio'), streams = [AudioStreamObject(codec=AudioCodec.MP3, channels=2)])],
			optimized_for_streaming = 'false'
		))
	return ret


@indirect
def ViewMedia(id, fmt):
	if fmt == 'image':
		meta = JSON.ObjectFromURL(GALLERYAPIURL % id, cacheTime=3600.0, timeout = 120.0)['gallery']
		oc = ObjectContainer()
		for image in meta['images']:
			# Not all qualties are always available, so we use fallback
			original_img_url = image['image_url'].replace('medium','original')
			high_img_url = image['image_url'].replace('medium','large')
			medium_img_url = image['image_url']
			oc.add(PhotoObject(
				key = Resource.ContentsOfURLWithFallback([original_img_url, high_img_url, medium_img_url]),
				title = image['caption'],
				thumb = Resource.ContentsOfURLWithFallback(medium_img_url)
			))
		return oc
	elif fmt == 'audio':
		audio_meta = JSON.ObjectFromURL(AUDIOAPIURL % id, cacheTime=3600.0)['audio_meta']
		return IndirectResponse(TrackObject, key=audio_meta['iphone_url'])
	elif fmt == 'video':
		video_url = 'http://cdn.riptide-mtvn.com/r2/' + id.split('/r2/')[-1] 
		return IndirectResponse(VideoClipObject, key=video_url)


def NormalizeURL(url):
	# URLs already have a friendly format, no need to normalize them
	return url

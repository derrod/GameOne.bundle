# Game One URL Service
# v0.1 by Rodney <xlnedder@gmail.com>

# Audio/Video Metadata API endpoints
VIDEOAPIURL = "https://gameone.de/videos/%s.json"
AUDIOAPIURL = "https://gameone.de/audios/%s.json"

# Headers used by the official App.
HTTP.Headers['User-Agent'] = 'GameOne/323 CFNetwork/609 Darwin/13.0.0'
HTTP.Headers['X-G1APP-DEVICEINFO'] = 'iPhone3,1_6.0'
HTTP.Headers['X-G1APP-VERSION'] = '2.0.1(323)'
HTTP.Headers['X-G1APP-APPIDENTIFIER'] = 'de.gameone.iphone'
HTTP.Headers['X-G1APP-IDENTIFIER'] = '824BAB323627483698C844E2CC978D06'

def MetadataObjectForURL(url):

	id = url.split('/')[-1]

	#Determine whether the url is for audio or video content, then handle it accordingly.
	if len(id) > 4:
		video_meta = JSON.ObjectFromURL(VIDEOAPIURL % id, cacheTime=3600.0, timeout = 20.0)['video_meta']
		duration = int(video_meta['duration']) * 1000
		return VideoClipObject(
			title = video_meta['title'],
			summary = video_meta['description'],
			thumb = Resource.ContentsOfURLWithFallback(video_meta['img_url']),
			duration = duration,
		)
	else:
		audio_meta = JSON.ObjectFromURL(AUDIOAPIURL % id, cacheTime=3600.0)['audio_meta']
		return TrackObject(
			title = audio_meta['title'],
			summary = audio_meta['description'],
		)

def MediaObjectsForURL(url):
	ret = []
	id = url.split('/')[-1]
	
	#Determine whether the url is for audio or video content, then handle it accordingly.
	if len(id) > 4:
		qualities = XML.ObjectFromURL('http://riptide.mtvnn.com/mediagen/' + id, cacheTime=3600.0, timeout = 120.0)
		for item in qualities.video.item.rendition[::-1]:
			height = int(item.attrib['height'])
			url = item.src.text
			
			ret.append(MediaObject(
				video_codec = VideoCodec.H264,
				audio_codec = AudioCodec.AAC,
				video_resolution = height,
				audio_channels = 2,
				container = 'mp4',
				parts = [PartObject(key=Callback(PlayMedia, id = url, fmt = str(height)), streams = [AudioStreamObject(language_code = Locale.Language.German)])],
				optimized_for_streaming = 'true',
			))
	else:
		ret.append(MediaObject(
			audio_codec = AudioCodec.MP3,
			audio_channels = 2,
			container = 'mp3',
			parts = [PartObject(key=Callback(PlayMedia, id = id, fmt='audio'))],
			optimized_for_streaming = 'false',
		))
	
	return ret

@indirect
def PlayMedia(id, fmt):
	if fmt == 'audio':
		audio_meta = JSON.ObjectFromURL(AUDIOAPIURL % id, cacheTime=3600.0)['audio_meta']
		return IndirectResponse(TrackObject, key=audio_meta['iphone_url'])
	else:
		# We can't really do anything here, so we do next to nothing.
		video_url = 'http://cdn.riptide-mtvn.com/r2/' + id.split('/r2/')[-1] 
		
		return IndirectResponse(VideoClipObject, key=video_url)

def NormalizeURL(url):
	# URLs already have a friendly format, no need to normalize them
	return url
